{
  "code": "export default class Utility {\r\n    static calcDistance(a, b) {\r\n        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\r\n    }\r\n    static getDirectionAToB(A, B, normalize = true) {\r\n        let pA = A.transform.position.clone();\r\n        let pB = B.transform.position.clone();\r\n        let dir = new Laya.Vector3(0, 0, 0);\r\n        Laya.Vector3.subtract(pB, pA, dir);\r\n        if (normalize)\r\n            Laya.Vector3.normalize(dir, dir);\r\n        return dir;\r\n    }\r\n    static fixPosY(y, designHeight = 1334) {\r\n        return y * Laya.stage.displayHeight / designHeight;\r\n    }\r\n    static findNodeByName(rootNode, name) {\r\n        let targetNode = null;\r\n        let funC = (node) => {\r\n            for (let i = 0; i < node.numChildren; i++) {\r\n                if (node.getChildAt(i).name == name) {\r\n                    targetNode = node.getChildAt(i);\r\n                    return;\r\n                }\r\n                else {\r\n                    funC(node.getChildAt(i));\r\n                }\r\n            }\r\n        };\r\n        funC(rootNode);\r\n        return targetNode;\r\n    }\r\n    static TmoveTo(node, duration, des, cb, ease) {\r\n        let t = new Laya.Tween();\r\n        var posOld = node.transform.position;\r\n        t.to(node.transform.position, {\r\n            x: des.x,\r\n            y: des.y,\r\n            z: des.z,\r\n            update: new Laya.Handler(this, () => {\r\n                node.transform.position = posOld;\r\n            })\r\n        }, duration, ease ? ease : Laya.Ease.cubicOut, Laya.Handler.create(this, () => {\r\n            cb && cb();\r\n        }));\r\n    }\r\n    static RotateTo(node, duration, des, cb) {\r\n        var rotationOld = node.transform.localRotationEuler;\r\n        Laya.Tween.to(node.transform.localRotationEuler, {\r\n            x: des.x,\r\n            y: des.y,\r\n            z: des.z,\r\n            update: new Laya.Handler(this, function () {\r\n                if (node)\r\n                    node.transform.localRotationEuler = rotationOld;\r\n            })\r\n        }, duration, Laya.Ease.cubicOut, Laya.Handler.create(this, function () {\r\n            cb && cb();\r\n        }));\r\n    }\r\n    static updateNumber(baseNum, times, label, inclease, cb) {\r\n        let timesNum = baseNum * times;\r\n        let func = () => {\r\n            if (inclease) {\r\n                baseNum += 1;\r\n                label.text = baseNum.toString();\r\n                if (baseNum >= timesNum) {\r\n                    cb && cb();\r\n                    Laya.timer.clear(this, func);\r\n                }\r\n            }\r\n            else {\r\n                timesNum -= 1;\r\n                label.text = timesNum.toString();\r\n                if (timesNum <= baseNum) {\r\n                    cb && cb();\r\n                    Laya.timer.clear(this, func);\r\n                }\r\n            }\r\n        };\r\n        Laya.timer.frameLoop(1, this, func);\r\n    }\r\n}\r\n",
  "references": []
}
